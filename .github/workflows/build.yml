name: Build, test and publish

on:
  push:
    branches: '**'
    tags: [ '*' ]
  schedule:
    # Daily 5am australian/brisbane time
    - cron: '15 0 * * *'
  workflow_dispatch:

jobs:
  build:
    name: Build and unit test code
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Run Nuke Build üèó
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        OCTOVERSION_CurrentBranch: ${{ (github.event_name == 'schedule' && 'nightly') || github.head_ref || github.ref }} # For pull_request events we override the /refs/pull/xx/merge branch to the PR's head branch
        RunNumber: ${{ github.run_number }}
        AzureKeyVaultUrl: ${{ secrets.AZURE_KEYVAULT_URL }}
        AzureKeyVaultAppId: ${{ secrets.AZURE_KEYVAULT_CLIENT_ID }}
        AzureKeyVaultTenantId: ${{ secrets.AZURE_KEYVAULT_TENANT_ID }}
        AzureKeyVaultAppSecret: ${{ secrets.AZURE_KEYVAULT_CLIENT_SECRET }}
        AzureKeyVaultCertificateName: ${{ secrets.AZURE_KEYVAULT_CERTIFICATE_NAME }}
      run: |
        ./build.cmd
    - uses: actions/upload-artifact@v2
      with:
        name: artifacts
        path: artifacts/
    - uses: actions/upload-artifact@v2
      with:
        name: octoversion
        path: octoversion.txt

  test:
    name: Run test matrix
    needs: build
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
      checks: write
    strategy:
      matrix:
        os: [windows-2022, windows-2019, ubuntu-20.04, ubuntu-18.04, macos-11]
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - uses: actions/download-artifact@v2
      with:
        name: octoversion
    - name: Run Nuke Test üß™
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      run: ./build.cmd --target Test
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: Tests
        path: artifacts/TestResults/*.trx
        reporter: dotnet-trx
  docker-build:
    name: Create Docker image
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts
    - uses: actions/download-artifact@v2
      with:
        name: octoversion
    - name: Run Nuke üõ¢
      run: ./build.sh --target BuildDockerImage
    - uses: actions/upload-artifact@v2
      with:
        name: docker-image
        path: artifacts/Octo.Docker.Image.*.tar.gz

  linux-distro-packages-build:
    name: Create Linux disto packages
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: OctopusDeploy/linux-package-feeds
        token: ${{ secrets.RENOVATE_GITHUB_TOKEN }}
        path: linux-package-feeds-repo
    - run: |
        ln -s linux-package-feeds-repo/source linux-package-feeds
    - uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts
    - uses: actions/download-artifact@v2
      with:
        name: octoversion
    - name: Create packages üõ¢
      env:
        SIGN_PRIVATE_KEY: ${{ secrets.SIGN_LINUX_DISTRO_PRIVATE_KEY }}
        SIGN_PASSPHRASE: ${{ secrets.SIGN_LINUX_DISTRO_PASSPHRASE }}
      run: ./build.sh --target CreateLinuxPackages
    - uses: actions/upload-artifact@v2
      with:
        name: packages-linux
        path: artifacts/OctopusTools.Packages.linux-x64.*.zip
    - name: Test packages üß™
      env:
        OCTOPUS_CLI_SERVER: ${{ secrets.OCTOPUS_URL }}
        OCTOPUS_CLI_API_KEY: ${{ secrets.INTEGRATIONS_API_KEY }}
        REDHAT_SUBSCRIPTION_USERNAME: ${{ secrets.REDHAT_SUBSCRIPTION_USERNAME }}
        REDHAT_SUBSCRIPTION_PASSWORD: ${{ secrets.REDHAT_SUBSCRIPTION_PASSWORD }}
      run: ./build.sh --target TestLinuxPackages

  publish:
    name: Publish the packages
    needs: [docker-build, linux-distro-packages-build, test]
    runs-on: ubuntu-latest
    env:
      OCTOPUS_CLI_SERVER: ${{ secrets.OCTOPUS_URL }}
      OCTOPUS_CLI_API_KEY: ${{ secrets.INTEGRATIONS_API_KEY }}
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: artifacts
    - uses: actions/download-artifact@v2
      with:
        name: packages-linux
        path: artifacts
    - uses: actions/download-artifact@v2
      with:
        name: docker-image
        path: artifacts

    - name: Compress packages
      id: compress-packages
      run: |
        cd artifacts
        VERSION=$(ls OctopusTools.*.linux-x64.tar.gz | tail -1 | sed -nE 's/^OctopusTools\.(.*)\.linux-x64.tar.gz$/\1/p')
        tar -xf OctopusTools.$VERSION.linux-x64.tar.gz
        zip OctopusTools.Zips.$VERSION.zip *.zip *.tar.gz
        echo "::set-output name=version::$(echo $VERSION)"

    - name: Install Octopus CLI üêô
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest
    
    - name: Push a package to Octopus Deploy üêô
      uses: OctopusDeploy/push-package-action@v1.1.2
      with:
        space: Integrations
        packages: |
          artifacts/Octopus.DotNet.Cli.${{ steps.compress-packages.outputs.version }}.nupkg
          artifacts/OctopusTools.${{ steps.compress-packages.outputs.version }}.nupkg
          artifacts/Octo.Docker.Image.${{ steps.compress-packages.outputs.version }}.tar.gz
          artifacts/OctopusTools.Zips.${{ steps.compress-packages.outputs.version }}.zip

    - name: Create a release in Octopus Deploy üêô
      uses: OctopusDeploy/create-release-action@v1.1.3
      with:
        space: Integrations
        project: 'Octopus CLI'
        package_version: ${{ steps.compress-packages.outputs.version }}
        package: '*:NuGet.CommandLine:4.4.1'
        gitRef: ${{ (github.ref_type == 'tag' && 'main' ) || (github.head_ref || github.ref) }}
        gitCommit: ${{ github.event.after || github.event.pull_request.head.sha }}